name: Build and Push Assist.Web to ECR

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'Assist.Web/**'
      - 'Assist.ServiceDefaults/**'
      - 'Assist.sln'
      - '.github/workflows/assist-web-ecr.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'Assist.Web/**'
      - 'Assist.ServiceDefaults/**'
      - 'Assist.sln'

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: helloworld/ai
  IMAGE_TAG: ${{ github.sha }}
  LIGHTSAIL_SERVICE_NAME: ai

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build the Docker image (context is root, dockerfile is in Assist.Web/)
        docker build -f Assist.Web/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push the image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Image pushed to $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "Image pushed to $ECR_REGISTRY/$ECR_REPOSITORY:latest"

    - name: Image digest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        echo "Image digest: $(docker inspect --format='{{index .RepoDigests 0}}' $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG)"

  deploy-to-lightsail:
    name: Deploy to AWS Lightsail
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create deployment configuration
      run: |
        # Get ECR registry URL from AWS account ID and region
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
        
        # Create containers configuration
        cat > containers.json << EOF
        {
          "assist-web": {
            "image": "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG",
            "ports": {
              "8080": "HTTP"
            },
            "environment": {
              "ASPNETCORE_ENVIRONMENT": "Production",
              "ASPNETCORE_URLS": "http://+:8080",
              "ConnectionStrings__openai": "${{ secrets.CONNECTIONSTRING_OPENAI }}",
              "ConnectionStrings__mongodb": "${{ secrets.CONNECTIONSTRING_MONGODB }}"
            }
          }
        }
        EOF
        
        # Create public endpoint configuration
        cat > public-endpoint.json << EOF
        {
          "containerName": "assist-web",
          "containerPort": 8080,
          "healthCheck": {
            "healthyThreshold": 2,
            "unhealthyThreshold": 2,
            "timeoutSeconds": 5,
            "intervalSeconds": 30,
            "path": "/",
            "successCodes": "200-499"
          }
        }
        EOF
        
        echo "Containers configuration:"
        cat containers.json
        echo "Public endpoint configuration:"
        cat public-endpoint.json

    - name: Deploy to Lightsail Container Service
      run: |
        # Create the deployment
        aws lightsail create-container-service-deployment \
          --service-name $LIGHTSAIL_SERVICE_NAME \
          --containers file://containers.json \
          --public-endpoint file://public-endpoint.json
        
        echo "Deployment initiated for $LIGHTSAIL_SERVICE_NAME"

    - name: Wait for deployment completion
      run: |
        echo "Waiting for deployment to complete..."
        
        # Wait for deployment to finish (max 10 minutes)
        for i in {1..60}; do
          STATE=$(aws lightsail get-container-services \
            --service-name $LIGHTSAIL_SERVICE_NAME \
            --query 'containerServices[0].state' \
            --output text)
          
          echo "Deployment state: $STATE"
          
          if [ "$STATE" = "RUNNING" ]; then
            echo "✅ Deployment completed successfully!"
            break
          elif [ "$STATE" = "FAILED" ]; then
            echo "❌ Deployment failed!"
            exit 1
          fi
          
          echo "Waiting... (attempt $i/60)"
          sleep 10
        done
        
        if [ "$STATE" != "RUNNING" ]; then
          echo "⚠️ Deployment timed out after 10 minutes"
          exit 1
        fi

